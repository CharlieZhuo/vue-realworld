import { afterAll, afterEach, beforeAll, describe, expect, it } from "vitest";
import { http, HttpResponse } from "msw";
import { setupServer } from "msw/node";
import createClient, { Client } from "openapi-fetch";
import type { paths } from "./schema"; // generated by openapi-typescript

const baseUrl = import.meta.env.VITE_API_BASE_URL as string | undefined;

let ApiClient: Client<paths> = createClient({
  baseUrl,
});

function reCreateClient() {
  ApiClient = createClient({
    baseUrl,
  });
}
const mockTags = ["tag1", "tag2", "tag3"];
const server = setupServer(
  http.get(`${baseUrl}/tags`, () => {
    return HttpResponse.json({ tags: mockTags });
  })
);

beforeAll(() => {
  server.listen({ onUnhandledRequest: "error" });
  // recreate the client after the server is set up
  // otherwise server won't be able to intercept the request
  reCreateClient();
});
afterEach(() => {
  server.resetHandlers();
});
afterAll(() => {
  server.close();
});

describe("apiClient", () => {
  it("should fetch articles", async () => {
    const result = await ApiClient.GET("/tags").then(({ data }) => data?.tags);
    expect(result).toEqual(mockTags);
  });
});
